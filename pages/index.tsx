import Head from "next/head";
import React from "react";
import styles from "../styles/Home.module.css";
import "antd/dist/reset.css";
import { useQuery, gql } from "@apollo/client";
import {
  Avatar,
  Button,
  Input,
  List,
  Popover,
  Select,
  Space,
  Typography,
} from "antd";
import Link from "next/link";
import {
  CloseCircleFilled,
  HeartFilled,
  HeartOutlined,
  SortAscendingOutlined,
  SortDescendingOutlined,
} from "@ant-design/icons";

export interface Pokemon {
  levellingRate: string;
  flavorTexts: Array<{
    flavor: string;
    game: string;
  }>;
  gender: {
    male: string;
    female: string;
  };
  sprite: string;
  baseStats: {
    attack: number;
    defense: number;
    hp: number;
    specialattack: number;
    specialdefense: number;
    speed: number;
  };
  types: Array<string>;
  species: string;
  bulbapediaPage: string;
}

export const POKEMONS_QUERY = gql`
  query Pokemons($search: String = "a", $offset: Int!) {
    getFuzzyPokemon(pokemon: $search, offset: $offset, take: 50) {
      levellingRate
      flavorTexts {
        flavor
        game
      }
      gender {
        male
        female
      }
      sprite
      baseStats {
        attack
        defense
        hp
        specialattack
        specialdefense
        speed
      }
      types
      species
      bulbapediaPage
    }
  }
`;

export default function Home() {
  const [currentItemLength, setCurrentItemLength] = React.useState(0);
  const [currentData, setCurrentData] = React.useState<Array<Pokemon>>([]);
  const [initialLoading, setInitialLoading] = React.useState(false);
  const [currentFilter, setFilter] = React.useState("species");

  const [watchList, setWatchList] = React.useState<Array<string>>([]);

  const [order, setOrder] = React.useState<"asc" | "desc">("asc");

  const { data, loading, error, fetchMore } = useQuery(POKEMONS_QUERY, {
    variables: {
      offset: currentItemLength,
    } as {
      offset: number;
      search?: string;
    },
  });

  React.useEffect(() => {
    if (initialLoading) {
      onLoadMore();
    }
  }, [initialLoading]);

  React.useEffect(() => {
    if (!loading && data) {
      setInitialLoading(true);
      setCurrentData((prev) => [...prev, ...data.getFuzzyPokemon]);
    }
  }, [loading, data]);

  React.useEffect(() => {
    if (error && currentData.length) {
      setCurrentData([]);
    }
  }, [error]);

  // React.useEffect(() => {}, [order]);

  const onLoadMore = () => {
    setCurrentItemLength((prev) => prev + 50);
    fetchMore({
      variables: {
        offset: currentItemLength + 50,
      },
    });
  };

  const loadMore =
    !loading && currentData.length ? (
      <div className={styles.loadmore}>
        <Button onClick={onLoadMore}>loading more</Button>
      </div>
    ) : null;

  function onFilter(searchTerms: string) {
    if (searchTerms) {
      setCurrentData((prev: any) =>
        prev.filter((pokemon: any) => {
          return pokemon[currentFilter].includes(searchTerms);
        })
      );
    } else {
      setCurrentData([]);
      setInitialLoading(false);
      setCurrentItemLength(0);
    }
  }

  const wachListData = [...watchList].sort((a, b) => {
    if (order === "asc") {
      return -1;
    }
    return 1;
  });

  const content = (
    <div>
      {watchList.length ? (
        <List
          dataSource={wachListData}
          renderItem={(item) => (
            <List.Item>
              <List.Item.Meta title={item} />
              <CloseCircleFilled
                onClick={() =>
                  setWatchList((prev) =>
                    prev.filter((current) => current !== item)
                  )
                }
              />
            </List.Item>
          )}
        />
      ) : (
        <p>Pokemon watch list is empty</p>
      )}
    </div>
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Space style={{ width: 1000 }} direction="vertical">
        <Input.Group compact>
          <Select
            defaultValue={currentFilter}
            style={{ width: "10%" }}
            onChange={(val) => setFilter(val)}
          >
            <Select.Option value="species">Species</Select.Option>
            <Select.Option value="types">Types</Select.Option>
          </Select>
          <Input.Search
            style={{ width: "30%" }}
            loading={loading}
            placeholder={`Search ${currentFilter}`}
            onSearch={onFilter}
          />
        </Input.Group>

        <Popover
          placement="top"
          trigger="click"
          content={content}
          title={
            <Button
              icon={
                order === "asc" ? (
                  <SortAscendingOutlined />
                ) : (
                  <SortDescendingOutlined />
                )
              }
              onClick={() => {
                setOrder((prev) => (prev === "asc" ? "desc" : "asc"));
              }}
            ></Button>
          }
        >
          <Button icon={<HeartFilled />}>({watchList.length})</Button>
        </Popover>
      </Space>
      <div style={{ marginTop: "3em" }}>
        <List
          grid={{ gutter: 16, column: 4 }}
          itemLayout="horizontal"
          loading={loading}
          dataSource={currentData}
          loadMore={loadMore}
          renderItem={(item) => (
            <List.Item>
              <List.Item.Meta
                avatar={<Avatar src={item.sprite} />}
                description={
                  watchList.includes(item.species) ? (
                    <HeartFilled
                      onClick={() =>
                        setWatchList((prev) =>
                          prev.filter((current) => current !== item.species)
                        )
                      }
                    />
                  ) : (
                    <HeartOutlined
                      onClick={() =>
                        setWatchList((prev) => [...prev, item.species])
                      }
                    />
                  )
                }
                title={
                  <Link
                    href={{
                      pathname: "/pokemon/[species]",
                      query: { species: item.species },
                    }}
                  >
                    {item.species.charAt(0).toUpperCase() +
                      item.species.slice(1)}
                  </Link>
                }
              />
            </List.Item>
          )}
        />
      </div>
    </div>
  );
}
